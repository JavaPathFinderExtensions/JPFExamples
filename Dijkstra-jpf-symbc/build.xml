<project name="Dijkstra-jpf-symbc" basedir = ".">

    <property name="main.build.dir" value="build/main"/>
    <property name="main.src.dir" value="src/main/java"/>
    <property name="test.build.dir" value="build/test"/>
    <property name="test.src.dir" value="src/test/java"/>
    <property name="jpf-symbc" value = "../../jpf-symbc"/>

    <!-- get the jpf-symbc path properties -->
    <property file="${jpf-symbc}/jpf.properties"/>

    <fail unless="jpf-symbc">no jpf-symbc location set, check site.properties</fail>

    <path id="lib.path">
        <pathelement location="${ANT_HOME}/lib/junit-4.13-beta-3.jar"/>
        <pathelement location="${ANT_HOME}/lib/hamcrest-core-1.3.jar"/>
        <pathelement location="../../jpf-core/build/RunTest.jar"/>
        <pathelement location="../../jpf-core/build/jpf.jar"/>
        <!-- add in what we need from the symbc -->
        <!-- if there is none, default to a 'jpf-core' peer dir -->
        <pathelement path="${jpf-symbc}/build/jpf-symbc.jar"/>
        <pathelement path="${jpf-symbc}/build/jpf-symbc-classes.jar"/>

    </path>

    <target name="compile">
        <mkdir dir="${main.build.dir}"/>
        <javac srcdir="${main.src.dir}" destdir="${main.build.dir}" includeantruntime="false" classpathref="lib.path"/>
    </target>

    <target name="test-compile" depends="compile">
        <mkdir dir="${test.build.dir}"/>
        <javac srcdir="${test.src.dir}" destdir="${test.build.dir}"
               includeantruntime="false">
            <compilerarg value="-cp"/>
            <compilerarg path="build/main/:../jpf-core/build/RunTest.jar:../jpf-core/build/jpf.jar"/>
        </javac>
    </target>



    <target name="test" depends="compile">
        <java dir="."
            jar="../../jpf-core/build/RunJPF.jar"
            fork="true"
            failonerror="true"
            maxmemory="1024m">
            <arg value="-log"/>
            <arg value="-show"/>
            <arg value="Dijkstra.jpf"/>

        </java>
    </target>

    <target name="junit-test" depends="test-compile">
        <junit printsummary="on" showoutput="on" haltonfailure="yes"
               fork="yes" forkmode="perTest" maxmemory="1024m">
            <classpath refid="lib.path"/>
            <batchtest>
                <fileset dir="${test.build.dir}" includes="FileOperation.class"/>
            </batchtest>
        </junit>
    </target>

    <target name="clean" description="clean up">
        <delete dir="${main.build.dir}"/>
        <delete dir="${test.build.dir}"/>
    </target>

</project>